// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fibonacci.proto

package fibonacci

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Mensagem de Request
type FibRequest struct {
	Number               int32    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FibRequest) Reset()         { *m = FibRequest{} }
func (m *FibRequest) String() string { return proto.CompactTextString(m) }
func (*FibRequest) ProtoMessage()    {}
func (*FibRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fff1ee5882f276bd, []int{0}
}

func (m *FibRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FibRequest.Unmarshal(m, b)
}
func (m *FibRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FibRequest.Marshal(b, m, deterministic)
}
func (m *FibRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FibRequest.Merge(m, src)
}
func (m *FibRequest) XXX_Size() int {
	return xxx_messageInfo_FibRequest.Size(m)
}
func (m *FibRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FibRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FibRequest proto.InternalMessageInfo

func (m *FibRequest) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

// Mensagem de Response
type FibResponse struct {
	Number               int32    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FibResponse) Reset()         { *m = FibResponse{} }
func (m *FibResponse) String() string { return proto.CompactTextString(m) }
func (*FibResponse) ProtoMessage()    {}
func (*FibResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fff1ee5882f276bd, []int{1}
}

func (m *FibResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FibResponse.Unmarshal(m, b)
}
func (m *FibResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FibResponse.Marshal(b, m, deterministic)
}
func (m *FibResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FibResponse.Merge(m, src)
}
func (m *FibResponse) XXX_Size() int {
	return xxx_messageInfo_FibResponse.Size(m)
}
func (m *FibResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FibResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FibResponse proto.InternalMessageInfo

func (m *FibResponse) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func init() {
	proto.RegisterType((*FibRequest)(nil), "fibonacci.FibRequest")
	proto.RegisterType((*FibResponse)(nil), "fibonacci.FibResponse")
}

func init() { proto.RegisterFile("fibonacci.proto", fileDescriptor_fff1ee5882f276bd) }

var fileDescriptor_fff1ee5882f276bd = []byte{
	// 129 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0xcb, 0x4c, 0xca,
	0xcf, 0x4b, 0x4c, 0x4e, 0xce, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x28,
	0xa9, 0x70, 0x71, 0xb9, 0x65, 0x26, 0x05, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x89, 0x71,
	0xb1, 0xe5, 0x95, 0xe6, 0x26, 0xa5, 0x16, 0x49, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x41, 0x79,
	0x4a, 0xaa, 0x5c, 0xdc, 0x60, 0x55, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0xb8, 0x94, 0x19, 0xb9,
	0x73, 0x71, 0xba, 0xc1, 0x4c, 0x16, 0xb2, 0xe2, 0x62, 0x4f, 0x4f, 0x2d, 0x01, 0xf1, 0x85, 0x44,
	0xf5, 0x10, 0x2e, 0x40, 0xd8, 0x26, 0x25, 0x86, 0x2e, 0x0c, 0x31, 0x5e, 0x89, 0x21, 0x89, 0x0d,
	0xec, 0x4e, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x16, 0x75, 0xf1, 0xcb, 0xba, 0x00, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FibonacciClient is the client API for Fibonacci service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FibonacciClient interface {
	GetFibo(ctx context.Context, in *FibRequest, opts ...grpc.CallOption) (*FibResponse, error)
}

type fibonacciClient struct {
	cc *grpc.ClientConn
}

func NewFibonacciClient(cc *grpc.ClientConn) FibonacciClient {
	return &fibonacciClient{cc}
}

func (c *fibonacciClient) GetFibo(ctx context.Context, in *FibRequest, opts ...grpc.CallOption) (*FibResponse, error) {
	out := new(FibResponse)
	err := c.cc.Invoke(ctx, "/fibonacci.Fibonacci/getFibo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FibonacciServer is the server API for Fibonacci service.
type FibonacciServer interface {
	GetFibo(context.Context, *FibRequest) (*FibResponse, error)
}

// UnimplementedFibonacciServer can be embedded to have forward compatible implementations.
type UnimplementedFibonacciServer struct {
}

func (*UnimplementedFibonacciServer) GetFibo(ctx context.Context, req *FibRequest) (*FibResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFibo not implemented")
}

func RegisterFibonacciServer(s *grpc.Server, srv FibonacciServer) {
	s.RegisterService(&_Fibonacci_serviceDesc, srv)
}

func _Fibonacci_GetFibo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FibRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibonacciServer).GetFibo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibonacci.Fibonacci/GetFibo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibonacciServer).GetFibo(ctx, req.(*FibRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Fibonacci_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fibonacci.Fibonacci",
	HandlerType: (*FibonacciServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getFibo",
			Handler:    _Fibonacci_GetFibo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fibonacci.proto",
}
